---
layout: post
title: NSInteger,NSUInteger,int和NSNumber
category: iOS
---

##NSInteger
typedef int NSInteger;

无符号的整型

当你不知道程序运行哪种处理器架构时，你最好使用NSInteger，因为在有可能int在32位系统中只是int类型，而在64位系统，int可能变是long型。除非不得不使用int／long型，否则推荐使用NSInteger。


	typedef struct _NSRange {
  	  NSUInteger location;
  	  NSUInteger length;
	} NSRange;

NSRage的length就是NSUinterge类型，再开发时要特别注意。这种类型不要用大与0判断，负数的时候是检测不出来的。

##NSUInteger
typedef unsigned int NSUInteger;

有符号的整型

##int
整型，推荐使用NSInteger，因为这样就不用考虑设备是32位的还是64位的。


##NSNumber
但是NSNumber是一个类。如果想要存储一个数值，直接用NSInteger是不行的，NSInteger是基础类型。比如存放在NSArray里，需要用NSNumber类型。

##NSValue

我们说像数组这样的Foundation集合只能存储对象,不能存储像int这样的基本数据类型.但是我们往往也会有这样的需求,例如需要将CGPoint或是CGRect这样的结构存储在集合中.一个NSValue对象是用来存储一个C或者Objective－C数据的简单容器。它可以保存任意类型的数据，比如int，float，char，当然也可以是指pointers, structures, and object ids。NSValue类的目标就是允许以上数据类型的数据结构能够被添加到集合里.这种结构转化为对象的方式,在Objective-C中称为包装(wraping),相反的,从对象中解出基本类型,称为展开(unwraping)。

NSNumber 继承自NSObject,可使用compare、isEqual等消息。
NSNumber是NSValue的子类。NSValue可包装任意类型值。




