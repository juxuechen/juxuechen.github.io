---
layout: post
title: 常用命令
category: learning
---

#常用命令
####cat


	整个文件 cat filename
	创建文件 cat > filename
	合并文件 cat file1 file2 > file
	-n 或 --number 由 1 开始对所有输出的行数编号
	-b 或 --number-nonblank 和 -n 相似，只不过对于空白行不编号
	-s 或 --squeeze-blank
	当遇到有连续两行以上的空白行，就代换为一行的空白行
	-v 或 --show-nonprinting



####sort
将文件的每一行作为一个单位，相互比较，比较原则是从首字符向后，依次按ASCII码值进行比较，最后将他们按升序输出。

	sort -u filename 去掉重复行
	sort -r filename 改成降序
	sort -r filename -o  把排序结果输出到原文件中filename
	sort -n filename 以数值排序 1 2 10  
	sort -n -k 2 -t : filename  以:分隔，第2列数值排序。

####grep
grep:grep,egrep,fgrep-打印出匹配条件的文字行
</br>正则表达式元字符集（基本集）
<pre><code>
^ 锚定行的开始 如：'^grep'匹配所有以grep开头的行。
     cat iii | grep '^f'
$ 锚定行的结束 如：'grep$'匹配所有以grep结尾的行。
     cat iii | grep 'd&'
. 匹配一个非换行符的字符 如：'gr.p'匹配gr后接一个任意字符，然后是p。
     cat iii | grep 'a.c'
* 匹配零个或多个先前字符 如：'*grep'匹配所有一个或多个空格后紧跟grep的行。 .*一起用代表任意字符。
     cat iii | grep 'a*d'
[] 匹配一个指定范围内的字符，如'[Gg]rep'匹配Grep和grep。
     cat iii | grep '[ab]b'
[^] 匹配一个不在指定范围内的字符，如：'[^A-FH-Z]rep'匹配不包含A-R和T-Z的一个字母开头，紧跟rep的行。
     cat iii | grep '[^a]b'
\(..\) 标记匹配字符，如'\(love\)'，love被标记为1。
     cat iii | grep '\(ab\)'
\< 锚定单词的开始，如:'\<grep'匹配包含以grep开头的单词的行。
     cat iii | grep '\<ab'
\> 锚定单词的结束，如'grep\>'匹配包含以grep结尾的单词的行。
     cat iii | grep 'd\>'
x\{m\} 重复字符x，m次，如：'o\{5\}'匹配包含5个o的行。
     cat iii | grep 'd\{2\}'
x\{m,\} 重复字符x,至少m次，如：'o\{5,\}'匹配至少有5个o的行。
     cat iii | grep 'd\{2,\}'
x\{m,n\} 重复字符x，至少m次，不多于n次，如：'o\{5,10\}'匹配5--10个o的行。
     cat iii | grep 'be\{1,2\}' 
\w 匹配文字和数字字符，也就是[A-Za-z0-9]，如：'G\w*p'匹配以G后跟零个或多个文字或数字字符，然后是p。
     grep 'a\w*b'
\W \w的反置形式，匹配一个或多个非单词字符，如点号句号等。
     grep 'a\W*b'
\b 单词锁定符，不加\b也可以。如: '\bgrep\b'只匹配grep。
     grep abc 
用于egrep和greo -E的元字符扩展集
+ 匹配一个或多个先前的字符。如：'[a-z]+able'，匹配一个或多个小写字母后跟able的串，如loveable,enable,disable等。
? 匹配零个或多个先前的字符。如：'gr?p'匹配gr后跟一个或没有字符，然后是p的行。
a|b|c 匹配a或b或c。如：grep|sed匹配grep或sed
() 分组符号，如：love(able|rs)ov+匹配loveable或lovers，匹配一个或多个ov。
x{m},x{m,},x{m,n} 作用同x\{m\},x\{m,\},x\{m,n\}
</code></pre>

####cut-删除文件中字符行上的某些区域
<pre><code>
-b, --bytes=列表        //只选中指定的这些字节
-c, --characters=列表       // 只选中指定的这些字符
-d, --delimiter=分界符   // 使用指定分界符代替制表符作为区域分界
-f, --fields=列表        //只选中指定的这些域；并打印所有不包含分界符的 行，除非-s 选项被指定
-n                (忽略)
--complement       //补全选中的字节、字符或域
-s, --only-delimited        //不打印没有包含分界符的行
--output-delimiter=字符串    //使用指定的字符串作为输出分界符，默认采用输入 的分界符
--help        //显示此帮助信息并退出
--version        //显示版本信息并退出

仅使用f -b, -c 或-f 中的一个。每一个列表都是专门为一个类别作出的，或者您可以用逗号隔
开要同时显示的不同类别。您的输入顺序将作为读取顺序，每个仅能输入一次。
每种参数格式表示范围如下：
N    从第1 个开始数的第N 个字节、字符或域
N-    从第N 个开始到所在行结束的所有字符、字节或域
N-M    从第N 个开始到第M 个之间(包括第M 个)的所有字符、字节或域
-M    从第1 个开始到第M 个之间(包括第M 个)的所有字符、字节或域

例：
cut -b 1,2,4 order.*
cut -b 1-4 order.*
cut -c1-5 order.*
cut -c 1-2,3-5 order.*
cut -f 1-2 order.*
cut -d'n' -f2  order.*
</code></pre>



####sed-一个流编辑器
sed可删除(delete)、改变(change)、添加(append)、插入(insert)、合、交换文件中的资料行,或读入其它档的资料到文>件中,也可替换(substuite)它们其中的字串、或转换(tranfer)其中的字母等等。
<pre><code>
sed -e '1d' inputfile 删除第一行
sed -e 'n,md' file 删除第n行到最m行

sed -e '/xx/d' file  删除含有字母xx的行
sed -e '/xx/!d' file 保留含有字母xx的行
sed -e '/word1/, /word2/d' file  删除从含有单词word1到含有单词word2的行
替换
sed -e 's/a/b/' file  a替换成b
sed -e 's/w1/w2/g' file g代表替换所有匹配项目;这里,文件中所有字符串w1都会被替换成字串w1 w2
sed -e 's/w1/w2/10' file m(10)替换行内第m个符合的字串; 记住，是行内的第m个匹配的字串
sed -e 's/w1/& w2/p' file p替换第一个和w1匹配的字符串为w1 w2，并输出到标准输出.
</code></pre>


####uniq-删除重复的行
<pre><code>
cat tt |uniq -c  删除有相同内容的信息
-c 显示输出中，在每行行首加上本行在文件中出现的次数。它可取代-u和-d选项。
-d 只显示重复行。
-u 只显示文件中不重复的各行。
-n 前n个字段与每个字段前的空白一起被忽略。一个字段是一个非空格、非制表符的字符串，彼此由制表符和空格隔开（字段从0开始编号）。
+n 前n个字符被忽略，之前的字符被跳过（字符从0开始编号）。
-f n 与- n相同，这里n是字段数。
-s n 与＋n相同，这里n是字符数。
</code></pre>

####find-在文件目录中搜索文件
find /Users/chenyang -name "crash*" 在chenyang的目录下查找crash开头的文件。

####less-在文件里向前或向后移动
在 less 命令，使用“/”来执行向前搜索，使用“？”命令执行向后搜索。搜索条件是一个正则表达式。